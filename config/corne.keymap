/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        flashcard: flashcard {
            compatible = "zmk,behavior-macro";
            label = "FLASHCARD";
            #binding-cells = <0>;
            bindings =
                <&kp LS(E) &kp LS(X) &kp A &kp O &kp I &kp RET &kp LS(K) &kp A &kp U &kp D &kp X &kp RET &kp LS(B) &kp V &kp P &kp U &kp EQUAL &kp X &kp P &kp SPACE &kp B &kp V &kp V &kp QMARK &kp RET &kp LS(K) &kp A &kp X &kp S &kp LS(N) &kp RET &kp A &kp SEMI &kp LS(N) &kp RET &kp LS(I) &kp LS(X) &kp D &kp LS(N) &kp SPACE &kp Z &kp Z &kp W &kp W &kp RET &kp LS(E) &kp D &kp QMARK &kp LS(E) &kp LS(X)>,
                <&macro_tap>;
        };

        Questce: Questce {
            compatible = "zmk,behavior-macro";
            label = "QUESTCE";
            #binding-cells = <0>;
            bindings =
                <&kp LS(B) &kp V &kp P &kp U &kp EQUAL &kp X &kp P>,
                <&macro_tap>;
        };

        que: que {
            compatible = "zmk,behavior-macro";
            label = "QUE";
            #binding-cells = <0>;
            bindings = <&kp B &kp V &kp P>, <&macro_press>;
        };

        qu1: qu1 {
            compatible = "zmk,behavior-macro";
            label = "QU1";
            #binding-cells = <0>;
            bindings = <&kp B &kp V &kp V &kp QMARK>, <&macro_press>;
        };
    };

    combos {
        compatible = "zmk,combos";

        layer3 {
            bindings = <&mo 3>;
            key-positions = <38 39>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <36 41>;
        };

        m {
            bindings = <&kp SQT>;
            key-positions = <34 22>;
            layers = <0>;
        };

        z {
            bindings = <&kp LBKT>;
            key-positions = <22 10>;
            layers = <0>;
        };

        Wkey {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 19>;
            layers = <0>;
        };

        QUE {
            bindings = <&que>;
            key-positions = <31 14 16>;
        };

        qu1 {
            bindings = <&qu1>;
            key-positions = <31 22 14>;
        };

        FC_flash_card {
            bindings = <&flashcard>;
            key-positions = <34 18>;
        };

        Questceque {
            bindings = <&Questce>;
            key-positions = <31 14 16>;
        };

        mPLUS {
            bindings = <&kp SQT>;
            key-positions = <21 33>;
        };
    };

    behaviors {
        maj: maj {
            compatible = "zmk,behavior-hold-tap";
            label = "MAJ";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <1 2 4 3 1 2 3 4 5 6 7 8 9 10 13 14 15 16 17 18 19 20 21 22 25 26 27 28 29 30 31 32 33 34 36 37 38 39 40 41>;
            tapping-term-ms = <350>;
        };

        usbBtClear: usbBtClear {
            compatible = "zmk,behavior-hold-tap";
            label = "USBBTCLEAR";
            bindings = <&bt>, <&out>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            hold-trigger-key-positions = <29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  B  |  É  |  P  |  O  |  È   |    |  M  |  V   |  D  |  L  |  J  |  Z   |
            // | ESC  |  A  |  U  |  I  |  E  |  ;   |    |  C  |  T   |  S  |  R  |  N  |  ^   |
            // | SHFT |  À  |  Y  |  X  |  :  |  K   |    |  ?  |  Q   |  G  |  H  |  F  | SHFT |
            //                    | GUI | LWR | SPC |     | ENT | RSE  | ALT |

            bindings = <
&none      &kp Q              &kp W  &kp E      &kp R             &kp T    &kp Y  &kp U                 &kp I          &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A              &kp S  &kp D      &kp F             &kp G    &kp H  &kp J                 &kp K          &kp L    &kp SEMI  &kp I
&kp LSHFT  &maj LEFT_SHIFT Z  &kp X  &kp C      &kp V             &kp B    &kp N  &kp M                 &kp COMMA      &kp DOT  &kp FSLH  &kp ESC
                                     &kp LCTRL  &maj SPACE SPACE  &mo 1    &mo 2  &maj RIGHT_ALT ENTER  &kp BACKSPACE
            >;
        };

        UN_1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  "  |  «  |  »  |  (   |  )  |   |  @  |  +  |  -  |  /  |  *  |  =   |
            // | BTCLR| BT1 | BT2 | BT3 | BT4  |     |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |      |     |   |     |     |     |     |     |      |
            //                    |     | SPC | PKSP |   | ALT | ENT  |    |

            bindings = <
&kp TAB    &kp N1      &kp N2             &kp N3       &kp N4  &kp N5    &kp N6                   &kp N7     &kp N8    &kp N9     &kp N0     &kp MINUS
&trans     &kp ESCAPE  &kp TAB            &key_repeat  &trans  &trans    &kp LC(LEFT)             &kp LEFT   &kp UP    &kp RIGHT  &kp MINUS  &trans
&kp LSHFT  &kp LBKT    &kt RIGHT_BRACKET  &kp A        &trans  &trans    &kp LEFT                 &kp DOWN   &kp DOWN  &trans     &trans     &trans
                                          &trans       &trans  &trans    &maj CAPSLOCK RA(COMMA)  &kp RCTRL  &kp RALT
            >;
        };

        deux_2 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4   |  5  |   |  6  |  7  |  8  |  9  |  0  |  °   |
            // | ESC  |     |     |     |      |     |   |  =  |  %  |  z  |  w  |  ç  |  $   |
            // | ESC  |     |     |     |      |     |   |  ç  |  w  |  =  |  %  |  z  |  $   |
            // | SHFT |     |     |     |      |     |   |  °  |  `  |  Z  |  W  |  Ç  |  #   |
            //                    |     | SPC | PKSP |   | ALT | ENT  |    |

            bindings = <
&kp TAB    &kp EXCL    &kp AT     &kp HASH        &kp DLLR          &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR   &kp LPAR   &kp RPAR  &kp UNDER
&kp ESC    &kp TILDE2  &kp TILDE  &kp UNDERSCORE  &kp UNDER         &kp GRAVE    &kp BSLH   &kp RBKT  &kp MINUS  &kp EQUAL  &kp LBKT  &kp GRAVE
&kp LSHFT  &trans      &trans     &trans          &trans            &trans       &kp UNDER  &kp PLUS  &kp LBRC   &kp RBRC   &kp PIPE  &kp TILDE
                                  &kp LGUI        &maj RIGHT RA(I)  &kp SPACE    &trans     &trans    &trans
            >;
        };

        un_deux_3 {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5                        &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &trans
&trans  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15                       &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans   &trans   &trans   &trans   &usbBtClear BT_CLR OUT_TOG    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
                          &trans   &trans   &trans                        &trans        &trans        &trans
            >;
        };
    };
};
